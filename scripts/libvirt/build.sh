#!/usr/bin/env bash
# For copyright and license terms, see LICENSE.txt (top level of repository)
# Repository: https://github.com/timegrid/debian-image-builder
#
#% Usage: ./build.sh [OPTIONS] suite
#%
#%   Builds a debian libvirt domain from scratch.
#%
#% Arguments:
#%   suite:                        debian codename (e.g. 'bookworm')
#%
#% Options:
#%   -h, --help                    display this help
#%       --colorless               omit colors
#%
#% Domain Options:
#%   -d, --domain-name=NAME        name of the domain (default: suite)
#%       --domain-cpus=INT         number of cpus (default: 2)
#%       --domain-memory=INT       amount of memory (default: 4096)
#%       --domain-os-variant=CODE  debian codename (default: autodetected)
#%
#%       --domain-hostname=NAME    hostname (default: domain name)
#%       --domain-password=PWD     root password (default: 'password')
#%       --domain-ssh-key=PATH     path to public root ssh key
#%                                   (default: './ssh/libvirtlocal.pub')
#%       --domain-sshd-keys=DIR    diretory with ssh host keys
#%                                   (default: autogenerated)
#%       --domain-timezone=ZONE    timezone (default: 'Europe/Berlin')
#%       --domain-keyboard=LAYOUT  keyboard layout (default: 'de')
#%       --domain-interface=PATH   path to / name of interface configuration file
#%                                   (default: 'dhcp')
#%       --domain-ip=IP            ip of the domain (default: dhcp)
#%       --domain-gateway=IP       gateway for the domain (default: dhcp)
#%
#% Net Options:
#%   -n, --network-name=NAME       name of the net (default: 'debian')
#%       --network-uuid=UUID       uuid of network (default: random)
#%       --network-ip-range=IP     ip range of the network (default: 192.168.100)
#%       --network-mac=MAC         mac of the interface (default: random)
#%       --xml-dir=PATH            directory of the xml configuration
#%                                   (default: './xml')
#%
#% Pool Options:
#%   -p, --pool-name=NAME          name of the pool (default: 'debian')
#%       --pool-dir=PATH           directory of the pool (default: './pool')
#%
#% Image Options:
#%   -i, --image-name=NAME         name of the image (default: suite)
#%       --image-format=FORMAT     format of the disk file (default: 'qcow2')
#%       --image-size=SIZE         size of the disk (default: '5G')
#%       --image-lvm-path=PATH     path to lv, names vg/lv (default: '/dev/vg/root'),
#%                                   no path means no lvm
#%       --image-type=TYPE         type of the filesystem (default: 'ext4')
#%       --image-dir=PATH          path for created disks (default: './image')
#%
#% Volume Options:
#%   -V, --volume-name=NAME        name of the volume (default: domain name)

set -eu

# Project
long=(
    domain-name:
    domain-cpus:
    domain-memory:
    domain-os-variant:
    domain-hostname:
    domain-password:
    domain-ssh-key:
    domain-sshd-keys:
    domain-timezone:
    domain-keyboard:
    domain-interface:
    domain-ip:
    domain-gateway:
    network-name:
    network-uuid:
    network-ip-range:
    network-mac:
    xml-dir
    pool-name:
    pool-dir:
    image-name:
    image-format:
    image-size:
    image-lvm-path:
    image-type:
    image-dir:
    volume-name:
)
scriptDir="$(dirname "$(readlink -vf "$0")")"
source "$scriptDir/.project.sh" \
       --short "d:n:p:i:V:" \
       --long  "$(printf '%s,' "${long[@]}" | sed 's/,$//')" \
       --root \
       -- "$@"
projectUser="$projectUser"
projectGroup="$projectGroup"
debianArch="$debianArch"
debianTimestamp="$debianTimestamp"
debuerreotypeDir="$debuerreotypeDir"
libvirtDir="$libvirtDir"

# Options
domainName=
domainOsVariant=
domainCpus=2
domainMemory=4096
domainHostname=
domainPassword=password
domainSshKey="$libvirtDir/ssh/libvirtlocal.pub"
domainSshdKeys=
domainTimezone="Europe/Berlin"
domainKeyboard="de"
domainInterface="$libvirtDir/interface/dhcp"
domainIp=
domainGateway=

networkName=debian
networkUuid="$(uuidgen)"
networkMac="$(od -An -N6 -tx1 /dev/urandom \
    | sed -e 's/^  *//' -e 's/  */:/g' -e 's/:$//' -e 's/^\(.\)[13579bdf]/\10/')"
networkIpRange=
xmlDir="$scriptDir/xml"

poolName=debian
poolDir="$libvirtDir/pool"

imageName=
imageFormat=qcow2
imageSize=5G
imageLvmPath=/dev/vg/root
imageType=ext4
imageDir="$libvirtDir/image"

volumeName=
while true; do
    case "$1" in
       # domain
       -d | --domain-name)       domainName="$2"      ; shift 2 ;;
            --domain-cpus)       domainCpus="$2"      ; shift 2 ;;
            --domain-memory)     domainMemory="$2"    ; shift 2 ;;
            --domain-os-variant) domainOsVariant="$2" ; shift 2 ;;

            --domain-hostname)   domainHostname="$2"  ; shift 2 ;;
            --domain-password)   domainPassword="$2"  ; shift 2 ;;
            --domain-ssh-key)    domainSshKey="$2"    ; shift 2 ;;
            --domain-sshd-keys)  domainSshdKeys="$2"  ; shift 2 ;;
            --domain-timezone)   domainTimezone="$2"  ; shift 2 ;;
            --domain-keyboard)   domainKeyboard="$2"  ; shift 2 ;;
            --domain-interface)  domainInterface="$2" ; shift 2 ;;
            --domain-ip)         domainIp="$2"        ; shift 2 ;;
            --domain-gateway)    domainGateway="$2"   ; shift 2 ;;

       # net
       -n | --network-name)      networkName="$2"     ; shift 2 ;;
            --network-uuid)      networkUuid="$2"     ; shift 2 ;;
            --network-mac)       networkMac="$2"      ; shift 2 ;;
            --network-ip-range)  networkIpRange="$2"  ; shift 2 ;;
            --xml-dir)           xmlDir="$2"          ; shift 2 ;;

       # pool
       -p | --pool-name)         poolName="$2"        ; shift 2 ;;
            --pool-dir)          poolDir="$2"         ; shift 2 ;;

       # image
       -i | --image-name)        imageName="$2"       ; shift 2 ;;
            --image-format)      imageFormat="$2"     ; shift 2 ;;
            --image-size)        imageSize="$2"       ; shift 2 ;;
            --image-lvm-path)    imageLvmPath="$2"    ; shift 2 ;;
            --image-type)        imageType="$2"       ; shift 2 ;;
            --image-dir)         imageDir="$2"        ; shift 2 ;;

       # volume
       -V | --volume-name)       volumeName="$2"      ; shift 2 ;;

       --) shift; break ;;
       *)  usage "ERROR: unknown flag '$1'." 1 ;;
    esac
done

# Arguments
suite="${1:-}"; shift || usage "missing argument: suite" 1

# Defaults
domainName="${domainName:-"$suite"}"
imageName="${imageName:-"$domainName"}"
volumeName="${volumeName:-"$domainName.${imageLvmPath:+lvm.}$imageType.$imageFormat"}"
if [ "$domainIp" ] && [ ! "$domainGateway" ]; then
    domainGateway="${domainIp%.*}.1"
fi
if [ "$domainIp" ] && [ ! "$networkIpRange" ]; then
    networkIpRange="${domainIp%.*}"
fi
if [ ! "$networkIpRange" ]; then
    networkIpRange=192.168.100
fi

# Paths
serial="$(date --date "$debianTimestamp" +%Y%m%d)"
rootfs="$debuerreotypeDir/builds/libvirt/$serial/$debianArch/$suite/slim/rootfs.tar.xz"
image="$imageDir/$imageName.${imageLvmPath:+lvm.}$imageType.$imageFormat"


#------------------------------------------------------------------------------
#%% Build debuerreotype rootfs
#------------------------------------------------------------------------------

if [ ! -f "$rootfs" ]; then
    buildArgs=(
        --arch "$debianArch"
        --timestamp "$debianTimestamp"
        --libvirt
    )
    "$debuerreotypeDir/build.sh" "${buildArgs[@]}" "$suite"
fi


#------------------------------------------------------------------------------
#%% Create libvirt network
#------------------------------------------------------------------------------

networkArgs=(
    --uuid "$networkUuid"
    --mac "$networkMac"
    --ip-range "$networkIpRange"
    --xml-dir "$xmlDir"
)
"$libvirtDir/create_network.sh" "${networkArgs[@]}" "$networkName"


#------------------------------------------------------------------------------
#%% Create libvirt pool
#------------------------------------------------------------------------------

poolArgs=(
    --pool-dir "$poolDir"
)
"$libvirtDir/create_pool.sh" "${poolArgs[@]}" "$poolName"


#------------------------------------------------------------------------------
#%% Create libvirt image
#------------------------------------------------------------------------------

imageArgs=(
    --format "$imageFormat"
    --size "$imageSize"
    --lvm-path "$imageLvmPath"
    --type "$imageType"
    --image-dir "$imageDir"
)
"$libvirtDir/create_image.sh" "${imageArgs[@]}" "$rootfs" "$imageName"


#------------------------------------------------------------------------------
#%% Create libvirt volume
#------------------------------------------------------------------------------

volumeArgs=(
    --name "$volumeName"
)
"$libvirtDir/create_volume.sh" "${volumeArgs[@]}" "$image" "$poolName"


#------------------------------------------------------------------------------
#%% Create libvirt domain
#------------------------------------------------------------------------------

domainArgs=(
    --cpus "$domainCpus"
    --memory "$domainMemory"
    --os-variant "$domainOsVariant"
    --hostname "$domainHostname"
    --password "$domainPassword"
    --ssh-key "$domainSshKey"
    --timezone "$domainTimezone"
    --keyboard "$domainKeyboard"
    --interface "$domainInterface"
    --ip "$domainIp"
    --gateway "$domainGateway"
)
[ "$domainSshdKeys" ] && domainArgs+=( --sshd-keys "$domainSshdKeys" )
"$libvirtDir/create_domain.sh" "${domainArgs[@]}" \
    "$domainName" "$networkName" "$poolName" "$volumeName"
