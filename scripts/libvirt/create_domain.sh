#!/usr/bin/env bash
# For copyright and license terms, see LICENSE.txt (top level of repository)
# Repository: https://github.com/timegrid/debian-image-builder
#
#% Usage: ./create_domain.sh [OPTIONS] name network pool volume
#%
#%   Creates/Prepares a libvirt domain.
#%
#% Arguments:
#%   name:             name of the domain
#%   network:          name of the network
#%   pool:             name of the pool
#%   volume:           name of the volume
#%
#% Options:
#%   -c, --cpus=INT         number of cpus (default: 2)
#%   -m, --memory=INT       amount of memory (default: 4096)
#%   -o, --os-variant=CODE  debian codename (default: autodetected)
#%
#%   -H, --hostname=NAME    hostname (default: domain name)
#%   -p, --password=PWD     root password (default: 'password')
#%   -s, --ssh-key=PATH     path to public root ssh key
#%                            (default: './ssh/libvirtlocal.pub')
#%   -S, --sshd-keys=DIR    directory with ssh host keys (default: autogenerated)
#%   -t, --timezone=ZONE    timezone (default: 'Europe/Berlin')
#%   -k, --keyboard=LAYOUT  keyboard layout (default: 'de')
#%   -i, --interface=PATH   path to / name of interface configuration file
#%                            (default: 'dhcp')
#%   -I, --ip=IP            ip of the domain (default: dhcp)
#%   -G, --gateway=IP       gateway for the domain (default: dhcp)
#%
#%   -h, --help             display this help
#%       --colorless        omit colors

set -eu

# Project
scriptDir="$(dirname "$(readlink -vf "$0")")"
long=(
    cpus:
    memory:
    os-variant:
    hostname:
    password:
    ssh-key:
    sshd-keys:
    timezone:
    keyboard:
    interface:
    ip:
    gateway:
)
source "$scriptDir/.project.sh" \
       --short "c:m:o:H:p:s:S:t:k:i:I:G:" \
       --long "$(printf '%s,' "${long[@]}" | sed 's/,$//')" \
       --root \
       -- "$@"
libvirtDir="$libvirtDir"

# Options
osVariant=
cpus=2
memory=4096

hostname=
password=password
sshKey="$libvirtDir/ssh/libvirtlocal.pub"
sshdKeys=
timezone="Europe/Berlin"
keyboard="de"
interface="$libvirtDir/interface/dhpc"
ip=
gateway=
while true; do
    case "$1" in
       -c | --cpus)       cpus="$2"      ; shift 2 ;;
       -m | --memory)     memory="$2"    ; shift 2 ;;
       -o | --os-variant) osVariant="$2" ; shift 2 ;;

       -H | --hostname)   hostname="$2"  ; shift 2 ;;
       -p | --password)   password="$2"  ; shift 2 ;;
       -s | --ssh-key)    sshKey="$2"    ; shift 2 ;;
       -S | --sshd-keys)  sshdKeys="$2"  ; shift 2 ;;
       -t | --timezone)   timezone="$2"  ; shift 2 ;;
       -k | --keyboard)   keyboard="$2"  ; shift 2 ;;
       -i | --interface)  interface="$2" ; shift 2 ;;
       -I | --ip)         ip="$2"        ; shift 2 ;;
       -G | --gateway)    gateway="$2"   ; shift 2 ;;

       --) shift; break ;;
       *)  usage "ERROR: unknown flag '$1'." 1 ;;
    esac
done

# Arguments
name="${1:-}"; shift || usage "missing argument: name" 1
network="${1:-}"; shift || usage "missing argument: network" 1
pool="${1:-}"; shift || usage "missing argument: pool" 1
volume="${1:-}"; shift || usage "missing argument: volume" 1

# Defaults
hostname="${hostname:-"$name"}"
if [ "$ip" ] && [ ! "$gateway" ]; then
    gateway="${ip%.*}.1"
fi

# Switches
created=false
virsh dominfo "$name" &> /dev/null && created=true || true


#------------------------------------------------------------------------------
#%% Fetch OS information from disk image
#------------------------------------------------------------------------------

if [ ! "$osVariant" ]; then
    title "Fetch OS information from disk image"
    if $created; then
        info "domain already exists, skipping information gathering"
    else
        info "volume" "$volume"
        volumePath="$(virsh vol-dumpxml $volume --pool $pool \
                      | grep -oP "(?<=<path>).*(?=</path>)")"
        info "volume path" "$volumePath"
        osRelease="$(virt-cat -a $volumePath /etc/os-release)"
        osVariant="debian$(grep -Po "(?<=VERSION_CODENAME=).*" <<< $osRelease)"
        info "os variant" "$osVariant"
    fi
    success
fi


#------------------------------------------------------------------------------
#%% Install libvirt domain
#------------------------------------------------------------------------------

title "Install libvirt domain"
info "name" "$name"
if $created; then
    info "domain already exists, skipping installation"
else
    info "network" "$network"
    info "pool" "$pool"
    info "volume" "$volume"
    info "cpus" "$cpus"
    info "memory" "$memory"
    info "os variant" "$osVariant"
    installArgs=(
        --connect "qemu:///system"
        --virt-type "kvm"
        --os-variant "$osVariant"
        --name "$name"
        --memory "$memory"
        --vcpus "$cpus"
        --disk "vol=$pool/$volume"
        --import
        --network "network=$network"
        --graphics "vnc,listen=127.0.0.1"
        --console "pty,target_type=serial"
        --noautoconsole
        --noreboot
    )
    virt-install "${installArgs[@]}"
fi
success


#------------------------------------------------------------------------------
#%% Prepare libvirt domain
#------------------------------------------------------------------------------

title "Prepare libvirt domain"
info "name" "$name"
if $created; then
    info "domain already exists, skipping preparation"
else
    interfaceName="$(basename $interface)"
    if [ "$interface" = "$interfaceName" ]; then
        interface=$libvirtDir/interface/$interface
    fi
    info "sysprep" \
         "default operations: https://www.libguestfs.org/virt-sysprep.1.html#operations" \
         "host settings: timezone, hostname" \
         "root access: password, ssh" \
         "network configuration" \
         "update sshd keys" \
         "update bootloader after lvm id has changed"
    info "timezone" "$timezone"
    info "hostname" "$hostname"
    info "root password" "$password"
    info "root ssh key" "$sshKey"
    info "sshd keys" "${sshdKeys:-autogenerated}"
    info "interface" "$interface"
    info "ip" "$ip"
    info "gateway" "$gateway"
    interfaceContent="$(cat $interface | sed "s|<ADDRESS>|$ip|" | sed "s|<GATEWAY>|$gateway|")"
    prepareArgs=(
        # host settings: timezone, hostname
        --timezone "$timezone"
        --hostname "$hostname"
        # root access: password, ssh
        --root-password "password:$password"
        --ssh-inject "root:file:$sshKey"
        # network configuration
        --write "/etc/network/interfaces.d/$interfaceName:$interfaceContent"
        # machine id
        --touch "/etc/machine-id"
        --truncate "/etc/machine-id"
    )
    # update sshd keys
    if [ "$sshdKeys" ]; then
        for key in "$sshdKeys"/ssh_host_*; do
            prepareArgs+=( --copy-in "$key:/etc/ssh" )
        done
    else
        prepareArgs+=( --run-command "dpkg-reconfigure openssh-server" )
    fi
    # execute
    virt-sysprep -d "$name" "${prepareArgs[@]}"

    # update bootloader after lvm id has changed
    customizeArgs=(
        --run-command "grub-install /dev/sda"
        --run-command "update-grub2"
    )
    virt-customize -d "$name" "${customizeArgs[@]}"
fi
success
